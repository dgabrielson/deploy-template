#!/usr/bin/env bash
set -e

URL="$(/usr/local/sbin/julialang_latest_url)"
if [[ -z "${URL}" ]]; then
    echo "Could not determine latest julia url"
    exit 1
fi
VERSION_FILE="/var/cache/julialang-last-modified"
export PATH="$PATH:/usr/sbin:/sbin"
INSTALL_DIR="/usr/local/julia"

function url_last_modified()
{
    wget -q --server-response --spider "${URL}" 2>&1 | grep Last-Modified
}


function local_last_modified()
{
    if [[ -f "${VERSION_FILE}" ]]; then
        cat ${VERSION_FILE}
    fi
}


function update_local_last_modified()
{
    local remote_lm=$1
    echo -n "${remote_lm}" > ${VERSION_FILE}
}


function update_available()
{
    local remote_lm=$1
    [[ "${remote_lm}" != "$(local_last_modified)" ]]
}


function do_install()
{
    local tarball=$1
    local newdir=$(tar tf "${tarball}" | grep -o '^[^/]\+' | sort -u)

    if [[ ! -d "${INSTALL_DIR}" ]]; then
        mkdir -p "${INSTALL_DIR}"
    fi

    tar zxf "${tarball}" -C "${INSTALL_DIR}"
    # extracts, e.g., to /usr/local/julia/julia-1.0.1/...
    ln -snf "${INSTALL_DIR}/${newdir}" "${INSTALL_DIR}/latest"

    ln -snf "${INSTALL_DIR}/latest/bin/julia" "/usr/local/bin/julia"

    echo "Julia updated: ${newdir}"
}

function do_upgrade()
{
    local tarball=$(basename ${URL})
    local remote_lm=$(url_last_modified)
    if update_available "${remote_lm}"; then
        wget -q "${URL}"
        echo "Installing update... ${tarball}"
        do_install "${tarball}"
        rm "${tarball}"
        update_local_last_modified "${remote_lm}"
    fi
}


function do_delay()
{
    if [[ "${no_delay}" == "yes" ]]; then
        return
    fi
    # delay differences based on host for rolling update
    local delay=$[ ( $RANDOM % 60 )  + 1 ]
    local name=$(hostname -s)
    case "${name}" in
        "node100") delay=1 ;;
        "node101") delay=120 ;;
        "node102") delay=240 ;;
        "node103") delay=360 ;;
    esac
    sleep ${delay}s
}


function usage()
{
    echo "usage: julialang_updater  [--nodelay || -h]"
    echo "   ";
    echo "  --nodelay       : Do not wait to start running";
    echo "  -h | --help     : This message";
}


function parse_args()
{
    # positional args
    args=()

    # named args
    while [ "$1" != "" ]; do
        case "$1" in
            --nodelay )                   no_delay="yes";        ;;
            -h | --help )                 usage;                 exit 0;; # quit and show usage
            * )                           args+=("$1")           # if no match, add it to the positional args
        esac
        shift # move to next kv pair
    done

    # restore positional args
    set -- "${args[@]}"

    # set defaults
    if [[ -z "$no_delay" ]]; then
      no_delay="no";
    fi
}


function main()
{
    parse_args "$@"
    do_delay
    do_upgrade
}


main "$@"
